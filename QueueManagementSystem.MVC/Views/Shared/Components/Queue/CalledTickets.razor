@using QueueManagementSystem.MVC.Services
@using QueueManagementSystem.MVC.Models
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using System.Speech.Synthesis
@namespace QueueManagementSystem.MVC.Components
@inject ITicketService TicketService
@inject IConfigurationService ConfigService
@inject IJSRuntime JS
@inject ILogger<CalledTickets> Logger
@inject IDbContextFactory<QueueManagementSystemContext> DbFactory

<link rel="stylesheet" href="/css/calledTickets.css" asp-append-version="true" />

<div class="display-container">
    <div class="left-column">
        <div class="ticket-display">
            @if (calledTicketsList.Count == 0)
            {
                <div class="ticket-info">
                    <span class="ticket-number">Panel</span>
                    <span class="ticket-destination">Loaded</span>
                </div>
            }
            else
            {
                @foreach (var ticket in calledTicketsList.Take(1))
                {
                    <div class="ticket-info">
                        <span class="ticket-number">@ticket.Item1</span>
                        <div class="destination-wrapper">
                            <span class="ticket-destination">@ticket.Item2</span>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="advertisement-section">
            <video id="advert-video" class="advertisement-video" autoplay muted>
                <source src="" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>


    </div>
    <div class="right-column">
        <div class="waiting-queue">
            @foreach (var ticket in pendingAnnouncements)
            {
                <div class="waiting-ticket">
                    <span class="waiting-number">@ticket.Item1</span>
                    <span class="waiting-destination">@ticket.Item2</span>
                </div>
            }
        </div>
    </div>
</div>

<script>
    window.QueueManagement = {
    currentUtterance: null,
    speakingQueue: [],
    isProcessing: false,
    retryAttempts: 3,
    retryDelay: 1000,

    findBestVoiceForLanguage(voices) {
        const preferredVoices = [
            { name: 'Google UK English Female', lang: 'en-GB' },
            { name: 'Microsoft Libby', lang: 'en-GB' },
            { name: 'Microsoft Zira', lang: 'en-US' },
            { name: 'Google US English', lang: 'en-US' }
        ];

        // Try to find preferred voices first
        for (const pref of preferredVoices) {
            const voice = voices.find(v =>
                v.name.toLowerCase().includes(pref.name.toLowerCase()) &&
                v.lang.startsWith('en'));
            if (voice) {
                console.log(`Found preferred voice: ${voice.name}`);
                return voice;
            }
        }

        // Fallback to any English voice with priority for GB
        const gbVoice = voices.find(v => v.lang === 'en-GB');
        if (gbVoice) return gbVoice;

        // Last resort: any English voice
        return voices.find(v => v.lang.startsWith('en'));
    },

    createUtterance(ticketNumber, destination) {
        const formattedTicketNumber = ticketNumber.toString().split('').join(' ');
        const text = `Ticket Number... ${formattedTicketNumber}... please proceed to ${destination}`;
        const utterance = new SpeechSynthesisUtterance(text);

        // Ensure speech synthesis is ready
        if (window.speechSynthesis.speaking) {
            window.speechSynthesis.cancel();
        }

        const voices = window.speechSynthesis.getVoices();
        const selectedVoice = this.findBestVoiceForLanguage(voices);

        if (selectedVoice) {
            utterance.voice = selectedVoice;
            utterance.voiceURI = selectedVoice.voiceURI;
        }

        utterance.rate = 0.85;
        utterance.pitch = 1.15;
        utterance.volume = 1.0;
        utterance.lang = 'en-GB';

        return utterance;
    },

    async speakText(utterance, attemptCount = 0) {
        return new Promise(async (resolve, reject) => {
            try {
                // Ensure speech synthesis is in a clean state
                window.speechSynthesis.cancel();
                await new Promise(resolve => setTimeout(resolve, 100));

                utterance.onstart = () => {
                    console.log('Started speaking:', utterance.text);
                    this.currentUtterance = utterance;
                };

                utterance.onend = () => {
                    console.log('Finished speaking');
                    this.currentUtterance = null;
                    this.clearSpeechSynthesisInterval();
                    resolve();
                };

                utterance.onerror = async (event) => {
                    console.warn('Speech synthesis error:', event.error);
                    this.currentUtterance = null;
                    this.clearSpeechSynthesisInterval();

                    if (attemptCount < this.retryAttempts) {
                        console.log(`Retrying speech synthesis (attempt ${attemptCount + 1}/${this.retryAttempts})`);
                        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
                        try {
                            await this.speakText(utterance, attemptCount + 1);
                            resolve();
                        } catch (error) {
                            reject(error);
                        }
                    } else {
                        reject(new Error(`Speech synthesis failed after ${this.retryAttempts} attempts: ${event.error}`));
                    }
                };

                // Start the Chrome bug fix interval
                this.startSpeechSynthesisInterval();

                // Speak with small delay to ensure proper initialization
                setTimeout(() => {
                    window.speechSynthesis.speak(utterance);
                }, 100);

            } catch (error) {
                console.error('Error in speakText:', error);
                reject(error);
            }
        });
    },

    // Chrome bug fix interval reference
    speechSynthesisInterval: null,

    startSpeechSynthesisInterval() {
        this.clearSpeechSynthesisInterval();
        this.speechSynthesisInterval = setInterval(() => {
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.pause();
                window.speechSynthesis.resume();
            }
        }, 5000);
    },

    clearSpeechSynthesisInterval() {
        if (this.speechSynthesisInterval) {
            clearInterval(this.speechSynthesisInterval);
            this.speechSynthesisInterval = null;
        }
    },

    async speakTicket(ticketNumber, destination, repeatCount) {
        const repetitions = parseInt(repeatCount) || 2;
        console.log(`Speaking ticket ${ticketNumber} ${repetitions} times`);

        this.speakingQueue.push({
            ticketNumber: ticketNumber,
            destination: destination,
            repetitions: repetitions
        });

        if (!this.isProcessing) {
            await this.processQueue();
        }
    },

    async processQueue() {
        if (this.isProcessing || this.speakingQueue.length === 0) return;

        this.isProcessing = true;

        try {
            while (this.speakingQueue.length > 0) {
                const currentItem = this.speakingQueue[0];

                for (let i = 0; i < currentItem.repetitions; i++) {
                    try {
                        const utterance = this.createUtterance(
                            currentItem.ticketNumber,
                            currentItem.destination
                        );
                        await this.speakText(utterance);
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    } catch (error) {
                        console.error('Failed to speak ticket:', error);
                        // Continue to next repetition even if one fails
                        continue;
                    }
                }

                this.speakingQueue.shift();
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        } finally {
            this.isProcessing = false;
            this.clearSpeechSynthesisInterval();
        }
    }
};

// Initialize speech synthesis with better error handling
// Modify the initSpeechSynthesis function
window.initSpeechSynthesis = () => {
    console.log('Initializing speech synthesis...');
    if ('speechSynthesis' in window) {
        const loadVoices = () => {
            const voices = window.speechSynthesis.getVoices();
            if (voices.length > 0) {
                console.log('Speech synthesis initialized with', voices.length, 'voices');
                console.log('Available voices:', voices.map(v => `${v.name} (${v.lang})`));
                return true;
            }
            console.log('No voices available yet');
            return false;
        };

        // Try loading voices immediately
        if (!loadVoices()) {
            console.log('Waiting for voices to load...');
            window.speechSynthesis.addEventListener('voiceschanged', () => {
                console.log('Voices changed event fired');
                loadVoices();
            }, { once: true });
        }

        // Reset speech synthesis when page visibility changes
        document.addEventListener('visibilitychange', () => {
            console.log('Visibility changed:', document.hidden ? 'hidden' : 'visible');
            if (document.hidden) {
                window.speechSynthesis.cancel();
                window.QueueManagement.clearSpeechSynthesisInterval();
            } else {
                // Re-initialize when page becomes visible again
                window.speechSynthesis.cancel();
                setTimeout(() => {
                    if (window.QueueManagement.speakingQueue.length > 0) {
                        window.QueueManagement.processQueue();
                    }
                }, 1000);
            }
        });
    } else {
        console.error('Speech synthesis not supported in this browser');
    }
};

// Add this near the end of your script, before the advertisement code
window.speakTicket = async (ticketNumber, destination, repeatCount) => {
    console.log('speakTicket called:', { ticketNumber, destination, repeatCount });
    try {
        await window.QueueManagement.speakTicket(ticketNumber, destination, repeatCount);
    } catch (error) {
        console.error('Error in speakTicket wrapper:', error);
    }
};

    let currentAdvertIndex = 0;
    let adverts = [];

    window.initializeAdvertRotation = (advertList) => {
        adverts = advertList;
        playNextAdvert();
    };

    function playNextAdvert() {
        if (adverts.length === 0) return;

        const video = document.getElementById('advert-video');
        const currentAdvert = adverts[currentAdvertIndex];

        video.src = currentAdvert.path;
        video.onended = () => {
            currentAdvertIndex = (currentAdvertIndex + 1) % adverts.length;
            playNextAdvert();
        };

        video.play().catch(error => {
            console.error('Error playing video:', error);
            currentAdvertIndex = (currentAdvertIndex + 1) % adverts.length;
            playNextAdvert();
        });
    }
</script>

@code {
    private List<(string, string)> calledTicketsList = new List<(string, string)>();
    private Queue<(string, string)> pendingAnnouncements = new Queue<(string, string)>();
    private bool isAnnouncementInProgress = false;
    private List<Advert> adverts;

    protected override async Task OnInitializedAsync()
    {
        TicketService.TicketCalledFromQueueEvent += TicketCalledFromQueue;
        TicketService.TicketRemovedFromCalledEvent += TicketRemovedFromCalled;

        await LoadAdverts();
    }

    private async Task LoadAdverts()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        adverts = await context.Adverts.OrderBy(a => a.Order).ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initSpeechSynthesis");
            if (adverts.Any())
            {
                await JS.InvokeVoidAsync("initializeAdvertRotation", adverts);
            }
        }
    }

    private async void TicketCalledFromQueue(object sender, (string, string) e)
    {
        await InvokeAsync(async () =>
        {
            pendingAnnouncements.Enqueue(e);
            // calledTicketsList.Clear(); // Clear existing tickets
            calledTicketsList.Add(e);  // Add the new ticket
            await Task.Delay(300);
            StateHasChanged();

            if (!isAnnouncementInProgress)
            {
                await ProcessPendingAnnouncements();
            }
        });
    }

    private async Task ProcessPendingAnnouncements()
    {
        if (isAnnouncementInProgress) return;

        while (pendingAnnouncements.Count > 0)
        {
            isAnnouncementInProgress = true;
            var (ticketNumber, destination) = pendingAnnouncements.Peek();

            try
            {
                await InvokeAsync(() =>
                {
                    calledTicketsList.Clear();
                    calledTicketsList.Add((ticketNumber, destination));
                    StateHasChanged();
                });

                // Get the configured number of repetitions
                int repetitions = await ConfigService.GetIntConfigurationAsync(
                    ConfigurationService.TicketCallRepetitions, 2);

                Logger.LogInformation($"Configured repetitions: {repetitions}");

                // Pass the repetitions value explicitly
                await JS.InvokeVoidAsync("speakTicket",
                    ticketNumber,
                    destination,
                    repetitions);
                pendingAnnouncements.Dequeue();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to process announcement: {ex.Message}");
                pendingAnnouncements.Dequeue();
            }
            finally
            {
                isAnnouncementInProgress = false;
            }
        }
    }

    private async void TicketRemovedFromCalled(object sender, string ticketNumber)
    {
        await InvokeAsync(() =>
        {
            calledTicketsList.RemoveAll(ct => ct.Item1 == ticketNumber);
            StateHasChanged();
        });
    }

    private async Task RequestSpeechSynthesisPermission()
    {
        try
        {
            await JS.InvokeVoidAsync("requestSpeechSynthesisPermission");
            await ProcessPendingAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to request speech synthesis permission: {ex.Message}");
        }
    }

}