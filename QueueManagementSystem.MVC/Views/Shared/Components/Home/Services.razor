@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using QueueManagementSystem.MVC.Models
@using QueueManagementSystem.MVC.Models.Smtp
@using QueueManagementSystem.MVC.Services
@using FastReport
@using FastReport.Export.PdfSimple;
@using FastReport.Export.Pdf;
@using QueueManagementSystem.MVC.Models.Configurations;
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IHttpClientFactory HttpClientFactory
@implements IAsyncDisposable

@namespace QueueManagementSystem.MVC.Components

@inject IDbContextFactory<QueueManagementSystemContext> DbFactory
@inject ITicketService TicketService
@inject IEmailSenderService EmailSenderService
@inject IReportService ReportService
@inject ISmsService smsService
@inject IConfigurationService ConfigurationService
@inject IFingerprintService FingerprintService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILogger<Services> Logger
@inject ToastService ToastService
@inject FingerprintState FingerprintState

<link rel="stylesheet" href="/css/services.css" asp-append-version="true" />

<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

@if (offeredServices == null)
{
    <h4 class="display-4">Services Loading...</h4>
}
else
{
    <div class="row">
        @foreach (var service in offeredServices)
        {
            <div class="col-sm-4">
                <div class="clickable-card mb-4" @onclick="() => OpenCustomerInfoModal(service.Name)">
                    <Card Color="CardColor.Light" TextAlignment="Alignment.Center" Style="min-height:140px;">
                        <CardBody>
                            <CardTitle>@service.Name</CardTitle>
                            <CardText>@service.Description</CardText>
                        </CardBody>
                    </Card>
                </div>
            </div>
        }
    </div>
}

<Modal @ref="customerInfoModal" Title="Customer Information" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <div class="row">
            @if (isFingerprintEnabled)
            {
                <div class="fingerprint-container @(_isProcessing ? "processing" : "") @(_isAuthenticated ? "authenticated" : "")">
                    <div class="fingerprint-section">
                        <div class="fingerprint-animation @GetAnimationClass()">
                            <div class="fingerprint-icon @GetIconClass()">
                                <i class="@GetIconName()"></i>
                            </div>
                            <div class="fingerprint-ripple"></div>
                        </div>

                        <div class="status-message @(_hasError ? "error" : "")">
                            @_statusMessage
                        </div>

                        @if (_isAuthenticated && !_ticketGenerated)
                        {
                            <div class="success-animation">
                                <div class="checkmark">
                                    <div class="checkmark-circle"></div>
                                    <div class="checkmark-stem"></div>
                                    <div class="checkmark-kick"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>


            }

                @* <div class="fingerprint-capture @(_isCapturing ? "capturing" : "") @(_isVerifying ? "verifying" : "")">
                    <div class="fingerprint-status">
                        <div class="fingerprint-icon">
                            <i class="@GetFingerprintIconClass()"></i>
                        </div>
                        <div class="fingerprint-animation">
                            <div class="scanner-line"></div>
                        </div>
                        <div class="status-message">
                            @_statusMessage
                        </div>
                        @if (_showRetry)
                        {
                            <button class="btn btn-primary mt-3" @onclick="StartCapture">
                                Try Again
                            </button>
                        }
                    </div>
                </div> *@

            @if (isFormEnabled)
            {
                <div class="col-md-@(isFingerprintEnabled ? "6" : "12")">
                    <EditForm Model="@customerInfo" autocomplete="off" OnValidSubmit="HandleServiceSelection">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (formFields?.ShowIdNumber ?? true)
                        {
                            <div class="mb-3">
                                <label for="customerIdNumber" class="form-label">
                                    National ID Number @(formFields?.RequireIdNumber ?? true ? "*" : "")
                                </label>
                                <InputText id="customerIdNumber"
                                           class="form-control"
                                           @bind-Value="customerInfo.Idnumber"
                                           required="@(formFields?.RequireIdNumber ?? true)"
                                           placeholder="Enter your ID number" />
                                <ValidationMessage For="@(() => customerInfo.Idnumber)" />
                            </div>
                        }
                        @if (formFields?.ShowName ?? true)
                        {
                            <div class="mb-3">
                                <label for="customerName" class="form-label">
                                    Name @(formFields?.RequireName ?? true ? "*" : "")
                                </label>
                                <InputText id="customerName"
                                           class="form-control"
                                           @bind-Value="customerInfo.Name"
                                           required="@(formFields?.RequireName ?? true)"
                                           placeholder="Enter your name" />
                                <ValidationMessage For="@(() => customerInfo.Name)" />
                            </div>
                        }
                        @if (formFields?.ShowPhoneNumber ?? true)
                        {
                            <div class="mb-3">
                                <label for="customerPhoneNumber" class="form-label">
                                    Phone Number @(formFields?.RequirePhoneNumber ?? true ? "*" : "")
                                </label>
                                <InputText id="customerPhoneNumber"
                                           class="form-control"
                                           @bind-Value="customerInfo.PhoneNumber"
                                           required="@(formFields?.RequirePhoneNumber ?? true)"
                                           placeholder="Enter your phone number" />
                                <ValidationMessage For="@(() => customerInfo.PhoneNumber)" />
                            </div>
                        }
                        @if (formFields?.ShowEmail ?? false)
                        {
                            <div class="mb-3">
                                <label for="customerEmail" class="form-label">
                                    Email @(formFields?.RequireEmail ?? false ? "*" : "")
                                </label>
                                <InputText id="customerEmail"
                                           class="form-control"
                                           @bind-Value="customerInfo.Email"
                                           required="@(formFields?.RequireEmail ?? false)"
                                           placeholder="Enter your email" />
                                <ValidationMessage For="@(() => customerInfo.Email)" />
                            </div>
                        }
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Class="float-end" @onclick="CloseCustomerInfoModal">Cancel</Button>
                                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end me-2" Disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="visually-hidden">Loading...</span>
                                    }
                                    else
                                    {
                                        <span>Submit</span>
                                    }
                                </Button>
                            </div>
                        </div>
                    </EditForm>

                </div>
            }
        </div>
    </BodyTemplate>
</Modal>


@code {
    private string statusMessage = "Scan your fingerprint...";
    private DotNetObjectReference<Services>? objRef;

    private int currentAuthAttempts = 0;
    private const int MAX_AUTH_ATTEMPTS = 3; // Maximum authentication attempts before suggesting alternative
    private bool showFingerprintSection = false;
    private bool showInfoSection = true;
    private bool isMobileVersion => NavigationManager.Uri.Contains("/services-mobile");
    private List<Service> offeredServices;
    private Ticket currentTicket;
    private Modal customerInfoModal;
    private Modal ticketInfoModal;
    private string selectedServiceName;
    private CustomerInfo customerInfo = new CustomerInfo();
    private bool isProcessing = false;
    private string fingerprintStatus = "";
    private string fingerprintMessage = "";
    private bool isInitialized = false;
    private bool isDeviceOpen = false;
    private bool isScanning = false;
    private Timer scanningTimer;
    private const int MAX_ATTEMPTS = 3;
    private int fingerprintAttempts = 0;
    private FormFieldConfiguration formFields;
    private List<ToastMessage> messages = new List<ToastMessage>();

    // Configuration flags
    private bool isFingerprintEnabled;
    private bool isFormEnabled;
    private int fingerCount = 0;

    private bool _isProcessing;
    private bool _isAuthenticated;
    private bool _hasError;
    private bool _ticketGenerated;
    private string _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
    private CancellationTokenSource _cts = new();

    [Parameter] public EventCallback<AuthenticationResult> OnAuthenticationComplete { get; set; }

    private string GetAnimationClass() => _isProcessing ? "scanning" : "";

    private string GetIconClass() => (_isAuthenticated, _hasError) switch
    {
        (true, _) => "success",
        (_, true) => "error",
        _ => ""
    };

    private string GetIconName() => (_isProcessing, _isAuthenticated, _hasError) switch
    {
        (true, _, _) => "fas fa-fingerprint fa-pulse",
        (_, true, _) => "fas fa-check-circle",
        (_, _, true) => "fas fa-exclamation-circle",
        _ => "fas fa-fingerprint"
    };


    private async void ServiceUpdatedEvent(object sender, EventArgs e)
    {
        await InvokeAsync(async () =>
        {
            using var context = DbFactory.CreateDbContext();
            offeredServices = await context.Services
            .Where(service => service.Active == true)
            .ToListAsync();
            StateHasChanged();
        });
    }

    // private string GetFingerprintIconClass()
    // {
    //     if (_isCapturing) return "fas fa-fingerprint fa-pulse";
    //     if (_isVerifying) return "fas fa-spinner fa-spin";
    //     return "fas fa-fingerprint";
    // }


    private async Task GenerateTicketAsync()
    {
        try
        {
            currentTicket = await TicketService.GenerateTicketAsync(selectedServiceName, customerInfo.Name, customerInfo.PhoneNumber, customerInfo.Idnumber);

            using var context = DbFactory.CreateDbContext();
            var servicePoint = await context.ServicePoints.FirstOrDefaultAsync(t => t.Id == currentTicket.ServicePointId);

            @if (isFormEnabled)
            {
                // Send SMS (Uncomment if needed)
                await smsService.SendSmsAsync(currentTicket.CustomerPhoneNumber, $"Welcome {customerInfo.Name}, Your ticket number is {currentTicket.TicketNumber} for {currentTicket.ServiceName}. Please wait at {servicePoint.Name}");
            }
            

            if (isMobileVersion)
            {
                NavigationManager.NavigateTo($"Queue/TicketTrackingPage/{currentTicket.TicketNumber}", true);

                // Send Email if provided
                if (!string.IsNullOrEmpty(currentTicket.IdNumber))
                {
                    // var message = new EmailMessageModel
                    //     {
                    //         Recipients = new[] { currentTicket.CustomerEmail },
                    //         Subject = "Your Ticket Information",
                    //         Body = $@"
                    // <html>
                    //     <body style='font-family: Arial, sans-serif;'>
                    //         <div style='max-width: 600px; margin: auto; border: 1px solid #ccc; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); overflow: hidden;'>
                    //             <!-- Header -->
                    //             <div style='background-color: #164799; padding: 20px; text-align: center;'>
                    //                 <h1 style='margin: 0; color: white; font-size: 2em;'>Queue Management System</h1>
                    //             </div>
                    //             <!-- Body -->
                    //             <div style='padding: 20px; text-align: center;'>
                    //                 <h2 style='color: #333;'>Your Ticket Information</h2>
                    //                 <p style='color: #555; font-size: 18px;'>Thank you for using our service. Here are your ticket details:</p>
                    //                 <div style='background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;'>
                    //                     <p style='margin: 5px 0; font-size: 22px;'><strong>Ticket Number:</strong> {currentTicket.TicketNumber}</p>
                    //                     <p style='margin: 5px 0; font-size: 22px;'><strong>Service:</strong> {currentTicket.ServiceName}</p>
                    //                     <p style='margin: 5px 0; font-size: 22px;'><strong>Checkin Time:</strong> {currentTicket.PrintTime}</p>
                    //                 </div>
                    //                 <p style='color: #555;'>Please keep this information handy for your reference.</p>
                    //             </div>
                    //             <!-- Footer -->
                    //             <div style='background-color: #f9f9f9; padding: 20px; text-align: center;'>
                    //                 <p style='color: #555;'>If you have any questions, please contact our support team.</p>
                    //                 <div style='margin-top: 20px;'>
                    //                     <a href='https://www.hanmak.co.ke/contact-us/' style='display: inline-block; padding: 10px 20px; font-size: 16px; color: #fff; background-color: #007BFF; text-decoration: none; border-radius: 5px;'>Contact Support</a>
                    //                 </div>
                    //             </div>
                    //         </div>
                    //     </body>
                    // </html>"
                    //     };
                    // await EmailSenderService.SendEmailAsync(message);

                    @if (isFormEnabled)
                    {
                        // Send SMS if needed
                        await smsService.SendSmsAsync(currentTicket.CustomerPhoneNumber, $"Your ticket number is {currentTicket.TicketNumber} for {currentTicket.ServiceName}.");              
                    }
                }
                else
                {
                    // Existing print logic for desktop
                    var base64Pdf = await GenerateTicketPdfBase64(currentTicket);
                    await JS.InvokeVoidAsync("printTicket", base64Pdf);
                    await Task.Delay(2000);
                    await CloseCustomerInfoModal();
                }
                await Task.Delay(2000);
                await CloseCustomerInfoModal();
            }
            else
            {
                isProcessing = false;
                await Task.Delay(2000);
                await CloseCustomerInfoModal();
                customerInfo = new CustomerInfo();
                var base64Pdf = await GenerateTicketPdfBase64(currentTicket);
                await JS.InvokeVoidAsync("printTicket", base64Pdf);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"{ex}");
            isProcessing = false;
            await CloseCustomerInfoModal();
            customerInfo = new CustomerInfo();
            ToastService.Notify(new ToastMessage

                {
                    Type = ToastType.Danger,
                    Title = "Ticket already exists in Queue",
                    Message = $"You already have an active ticket {ex.Message}"
                });
        }
    }

    // public async ValueTask DisposeAsync()
    // {

    //     await FingerprintService.CloseDeviceAsync();
    //     objRef?.Dispose();
    // }

    private async Task<string> GenerateTicketPdfBase64(Ticket ticket)
    {
        Report report = ReportService.GenerateTicketReport(ticket);
        using (MemoryStream strm = new MemoryStream())
        {
            PDFExport pdfExport = new PDFExport();
            pdfExport.Export(report, strm);
            return Convert.ToBase64String(strm.ToArray());
        }
    }

    private async Task OpenCustomerInfoModal(string serviceName)
    {
        selectedServiceName = serviceName;
        currentAuthAttempts = 0; // Reset attempts when opening modal
        fingerprintAttempts = 0; // Reset the attempts for new customer
        fingerprintMessage = ""; // Clear previous messages
        selectedServiceName = serviceName;
        ResetTicketGeneration(); // Reset the ticket generation state
        await customerInfoModal.ShowAsync();
    }

    private async Task CloseCustomerInfoModal()
    {
        await Task.Delay(1500);
        await customerInfoModal.HideAsync();
        ResetForm();
        ResetTicketGeneration(); // Reset the ticket generation state
        selectedServiceName = null; // Clear selected service
    }

    private void ResetForm()
    {
        customerInfo = new CustomerInfo();
        isProcessing = false;
        fingerprintStatus = "";
        fingerprintMessage = "";
    }

    private async Task HandleServiceSelection()
    {
        showInfoSection = false;
        showFingerprintSection = true;
        isProcessing = true;
        await GenerateTicketAsync();
    }

    private async Task ShowTicketInfoModal()
    {
        await ticketInfoModal.ShowAsync();
    }

    private async Task CloseTicketInfoModal()
    {
        await ticketInfoModal.HideAsync();

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Load configuration
        _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
        // Subscribe to authentication events
        FingerprintState.AuthenticationCompleted += HandleAuthenticationEvent;
        isFormEnabled = await ConfigurationService.GetBoolConfigurationAsync("FormEnabled");
        formFields = await ConfigurationService.GetFormFieldConfigurationAsync();
        isFingerprintEnabled = await ConfigurationService.GetBoolConfigurationAsync("FingerprintEnabled");

        // Initialize fingerprint device if enabled
        if (isFingerprintEnabled)
        {
            objRef = DotNetObjectReference.Create(this);
            await FingerprintService.InitializeAsync();
            isInitialized = await FingerprintService.InitializeAsync();
            if (isInitialized)
            {
                isDeviceOpen = true;
            }
        }

        using var context = DbFactory.CreateDbContext();
        offeredServices = await context.Services
            .Where(service => service.Active == true)
            .ToListAsync();
        StateHasChanged();
    }

    private async void HandleAuthenticationEvent(object? sender, AuthenticationResult result)
    {
        await InvokeAsync(async () =>
        {
            await HandleAuthenticationResult(result);
        });
    }

    private async Task HandleAuthenticationResult(AuthenticationResult result)
    {
        // Check if a service is selected and modal is open
        if (string.IsNullOrEmpty(selectedServiceName) || customerInfoModal == null)
        {
            _statusMessage = "Please select a service first before placing your finger on the scanner";
            _hasError = true;
            ToastService.Notify(new ToastMessage

                {
                    Type = ToastType.Danger,
                    Title = "Error",
                    Message = $"Please select a service first before placing your finger on the scanner"
                });
            StateHasChanged();
            return;
        }
        _isProcessing = false;
        _hasError = false;
        _isAuthenticated = result.IsAuthenticated;

        if (result.IsAuthenticated)
        {
            currentAuthAttempts = 0; // Reset attempts on successful authentication
            _statusMessage = "Authentication successful!";
            StateHasChanged();
            await Task.Delay(1000);
            await GenerateTicketAsync();
        }
        else
        {
            currentAuthAttempts++;
            await HandleFailedAuthentication();
        }

        await OnAuthenticationComplete.InvokeAsync(result);
        StateHasChanged();
    }

    private async Task HandleFailedAuthentication()
    {
        _hasError = true;

        if (currentAuthAttempts == 1)
        {
            _statusMessage = "Authentication failed. Please try again with the same finger.";
        }
        else if (currentAuthAttempts == 2)
        {
            _statusMessage = "Authentication failed again. Please try one more time with the same finger.";
        }
        else if (currentAuthAttempts >= 3)
        {
            _statusMessage = "Authentication failed. Please try using a different finger.";
            currentAuthAttempts = 0; // Reset counter for new attempts with different finger
        }

        StateHasChanged();
    }

    private async Task GenerateTicketWithDelay(AuthenticationResult result)
    {
        try
        {
            // Check if a service is selected and modal is open
            if (string.IsNullOrEmpty(selectedServiceName) || customerInfoModal == null)
            {
                _statusMessage = "Please select a service first before placing your finger on the scanner";
                _hasError = true;
                StateHasChanged();
                return;
            }
            if (!_ticketGenerated)
            {
                await Task.Delay(2000);
                await Task.Delay(1500, _cts.Token); // Allow time for success animation
                _ticketGenerated = true;

                // Generate the ticket
                try
                {
                    await Task.Delay(2000);
                    await GenerateTicketAsync();
                    await OnTicketGeneration.InvokeAsync(result);
                }
                catch (Exception ex)
                {
                    _statusMessage = "Error generating ticket";
                    _hasError = true;
                    Logger.LogError($"Error generating ticket: {ex}");
                }

                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation
        }
    }

    // Add this method to reset ticket generation state
    private async void ResetTicketGeneration()
    {
        await Task.Delay(1500);
        _ticketGenerated = false;
        _isAuthenticated = false;
        _hasError = false;
        _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
        StateHasChanged();
    }

    [Parameter] public EventCallback<AuthenticationResult> OnTicketGeneration { get; set; }

    public void Reset()
    {
        _isProcessing = false;
        _isAuthenticated = false;
        _hasError = false;
        _ticketGenerated = false;
        _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
        if (currentAuthAttempts < MAX_AUTH_ATTEMPTS)
        {
            _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
        }
        if (!_hasError)
        {
            _statusMessage = "Place your finger on the scanner for around 2 seconds then release...";
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _cts.Dispose();
        await FingerprintService.CloseDeviceAsync();
        objRef?.Dispose();
        FingerprintState.AuthenticationCompleted -= HandleAuthenticationEvent;
    }

    // [JSInvokable("ReceiveFingerprintData")]
    // public async Task ReceiveFingerprintData(string fingerprintData)
    // {
    //     // Call a controller to send fingerprintData for matching
    //     try
    //     {

    //         byte[] fingerprintBytes = Convert.FromBase64String(fingerprintData);
    //         statusMessage = "Received data";
    //         int lenth = fingerprintBytes.Length;

    //         CustomerInfo customer = new CustomerInfo();
    //         customer.FingerPrintData = fingerprintBytes;

    //         // Send to the controller for matching
    //         var response = await FingerprintService.MatchFingerPrintAsync(customer);

    //         if (response.IsAuthenticated)
    //         {
    //             statusMessage = "Fingerprint matched successfully." + response.Message;
    //             currentTicket = await TicketService.GenerateTicketAsync(selectedServiceName, customerInfo.Name, customerInfo.PhoneNumber, customerInfo.Idnumber);
    //             var base64Pdf = await GenerateTicketPdfBase64(currentTicket);
    //             await JS.InvokeVoidAsync("printTicket", base64Pdf);
    //             await CloseCustomerInfoModal();

    //         }
    //         else
    //         {
    //             statusMessage = "Fingerprint Registered Successfuly.";
    //             currentTicket = await TicketService.GenerateTicketAsync(selectedServiceName, customerInfo.Name, customerInfo.PhoneNumber, customerInfo.Idnumber);
    //             var base64Pdf = await GenerateTicketPdfBase64(currentTicket);
    //             await JS.InvokeVoidAsync("printTicket", base64Pdf);
    //             await CloseCustomerInfoModal();

    //         }

    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         currentTicket = await TicketService.GenerateTicketAsync(selectedServiceName, customerInfo.Name, customerInfo.PhoneNumber, customerInfo.Idnumber);
    //         var base64Pdf = await GenerateTicketPdfBase64(currentTicket);
    //         await JS.InvokeVoidAsync("printTicket", base64Pdf);
    //         await CloseCustomerInfoModal();
    //         // statusMessage = $"Error: {ex.Message}";
    //         // StateHasChanged();
    //         // Log the error or throw an exception with a descriptive message
    //         // throw new InvalidOperationException("Error in receiving fingerprint data", ex);
    //     }
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // await JS.InvokeVoidAsync("startWebSocket", objRef);
    //         if (isFingerprintEnabled)
    //         {
    //             await JS.InvokeVoidAsync("startFingerprintPolling", objRef);
    //         }
            
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }
}

<script>
    window.printTicket = function (base64pdf) {
        return new Promise((resolve) => {
            var blob = b64toBlob(base64pdf, 'application/pdf');
            var blobUrl = URL.createObjectURL(blob);
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.src = blobUrl;
            document.body.appendChild(iframe);

            iframe.onload = function () {
                setTimeout(function () {
                    iframe.contentWindow.print();
                    iframe.onafterprint = function () {
                        document.body.removeChild(iframe);
                        URL.revokeObjectURL(blobUrl);
                        resolve();
                    };
                });
            };
        });
    };

    function b64toBlob(b64Data, contentType = '', sliceSize = 512) {
        const byteCharacters = atob(b64Data);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);
            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }
</script>