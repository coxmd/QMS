@using QueueManagementSystem.MVC.Models
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using QueueManagementSystem.MVC.Services
@using QueueManagementSystem.MVC.Models.Configurations
@namespace QueueManagementSystem.MVC.Components
@inject IConfigurationService ConfigService
@inject ToastService ToastService

<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

<div class="card" style="padding:20px;background-color:#E6F2F2">
    <div class="row">
        <h4>System Configuration</h4>
        <EditForm Model="@systemConfig" OnValidSubmit="OnValidFormSubmit">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-md-12">
                    <!-- Queue To Room Setting -->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Queue To Room With Available Users Only</label>
                            <Switch Class="large-switch" @bind-Value="systemConfig.QueueToRoomWithAvailableUsersOnly" />
                        </div>
                    </div>

                    <!-- Pooling config-->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Is Queue Pooling Enabled</label>
                            <Switch Class="large-switch" @bind-Value="systemConfig.IsPoolingEnabled" />
                        </div>
                    </div>

                    <!-- Fingerprint Config-->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Is Fingerprint enabled</label>
                            <Switch Class="large-switch" @bind-Value="systemConfig.FingerprintEnabled" />
                        </div>
                    </div>

                    <!-- Form Config-->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Is Form Enabled</label>
                            <Switch Class="large-switch" @bind-Value="systemConfig.FormEnabled" />
                        </div>
                    </div>

                    <!-- Auto Remove Duration Setting -->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Remove Patients After Duration</label>
                            <InputSelect class="form-select w-25" @bind-Value="systemConfig.RemovePatientsDuration">
                                <option value="">Select duration</option>
                                <option value="12">12 hours</option>
                                <option value="24">24 hours</option>
                                <option value="48">48 hours</option>
                                <option value="72">72 hours</option>
                            </InputSelect>
                        </div>
                    </div>

                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <label class="form-label mb-0">Ticket Call Repetitions</label>
                            <InputSelect class="form-select w-25" @bind-Value="systemConfig.TicketCallRepetitions">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <option value="@i">@i time@(i > 1 ? "s" : "")</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <!-- Form Fields Config -->
                    <div class="mb-4 p-3 bg-white rounded shadow-sm">
                        <h5 class="mb-3">Form Field Configuration</h5>

                        <div class="form-field-list">
                            <!-- ID Number -->
                            <div class="form-field-item">
                                <div class="field-info">
                                    <div class="field-label">ID Number</div>
                                    @* <div class="field-sublabel">Show field on form</div> *@
                                </div>
                                <div class="field-controls">
                                    <div class="control-group">
                                        <div class="required-control">
                                            <span class="required-label">Show field on form</span>
                                            <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.ShowIdNumber" />
                                        </div>
                                        @if (systemConfig.FormFields.ShowIdNumber)
                                        {
                                            <div class="required-control">
                                                <span class="required-label">Required</span>
                                                <div class="switch-container">
                                                    <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.RequireIdNumber" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Name -->
                            <div class="form-field-item">
                                <div class="field-info">
                                    <div class="field-label">Name</div>
                                </div>
                                <div class="field-controls">
                                    <div class="control-group">
                                        <div class="required-control">
                                            <span class="required-label">Show field on form</span>
                                            <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.ShowName" />
                                        </div>
                                        @if (systemConfig.FormFields.ShowName)
                                        {
                                            <div class="required-control">
                                                <span class="required-label">Required</span>
                                                <div class="switch-container">
                                                    <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.RequireName" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Phone Number -->
                            <div class="form-field-item">
                                <div class="field-info">
                                    <div class="field-label">Phone Number</div>
                                </div>
                                <div class="field-controls">
                                    <div class="control-group">
                                        <div class="required-control">
                                            <span class="required-label">Show field on form</span>
                                            <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.ShowPhoneNumber" />
                                        </div>
                                        @if (systemConfig.FormFields.ShowPhoneNumber)
                                        {
                                            <div class="required-control">
                                                <span class="required-label">Required</span>
                                                <div class="switch-container">
                                                    <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.RequirePhoneNumber" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Email -->
                            <div class="form-field-item">
                                <div class="field-info">
                                    <div class="field-label">Email</div>
                                </div>
                                <div class="field-controls">
                                    <div class="control-group">
                                        <div class="required-control">
                                            <span class="required-label">Show field on form</span>
                                            <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.ShowEmail" />
                                        </div>
                                        @if (systemConfig.FormFields.ShowEmail)
                                        {
                                            <div class="required-control">
                                                <span class="required-label">Required</span>
                                                <div class="switch-container">
                                                    <Switch Class="config-switch" @bind-Value="systemConfig.FormFields.RequireEmail" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="row mt-4">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Submit" Size="ButtonSize.Small" Color="ButtonColor.Success" Class="float-end">
                        Save Changes
                    </Button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .large-switch {
        transform: scale(1.5);
        margin-left: 6.5rem;
    }

    .form-label {
        color: #333;
        font-weight: 500;
    }

    .form-field-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-field-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-bottom: 1px solid #eee;
    }

        .form-field-item:last-child {
            border-bottom: none;
        }

    .field-info {
        flex: 1;
    }

    .field-label {
        font-weight: 500;
        color: #333;
        margin-bottom: 0.25rem;
    }

    .field-sublabel {
        font-size: 0.875rem;
        color: #666;
    }

    .field-controls {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .control-group {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .switch-container {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .required-control {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .required-label {
        font-weight: 500;
        color: #333;
        white-space: nowrap;
    }

    .config-switch {
        transform: scale(1.2);
    }

</style>

@code {
    private SystemConfigurationModel systemConfig = new();
    private List<ToastMessage> messages = new List<ToastMessage>();
    private DateTime? RemovePatientsDateTime
    {
        get => systemConfig.RemovePatientsTime.HasValue
            ? DateTime.Today.Add(systemConfig.RemovePatientsTime.Value)
            : (DateTime?)null;
        set
        {
            if (value.HasValue)
            {
                systemConfig.RemovePatientsTime = value.Value.TimeOfDay;
            }
            else
            {
                systemConfig.RemovePatientsTime = null;
            }
        }
    }

    private class SystemConfigurationModel
    {
        public bool QueueToRoomWithAvailableUsersOnly { get; set; }
        public bool FingerprintEnabled { get; set; }
        public bool FormEnabled { get; set; }
        public bool IsPoolingEnabled { get; set; }
        public int? RemovePatientsDuration { get; set; }
        public TimeSpan? RemovePatientsTime { get; set; }
        public int TicketCallRepetitions { get; set; } = 2; // Default to 2 repetitions
        public FormFieldConfiguration FormFields { get; set; } = new();

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            systemConfig.QueueToRoomWithAvailableUsersOnly = await ConfigService
                .GetBoolConfigurationAsync(ConfigurationService.QueueToRoomWithAvailableUsersOnly);

            systemConfig.FingerprintEnabled = await ConfigService
            .GetBoolConfigurationAsync(ConfigurationService.FingerprintEnabled);

            systemConfig.FormEnabled = await ConfigService
            .GetBoolConfigurationAsync(ConfigurationService.FormEnabled);

            systemConfig.FormFields = await ConfigService
            .GetFormFieldConfigurationAsync();

            systemConfig.IsPoolingEnabled = await ConfigService
            .GetBoolConfigurationAsync(ConfigurationService.IsPoolingEnabled);

            systemConfig.RemovePatientsDuration = await ConfigService
                .GetIntConfigurationAsync(ConfigurationService.RemovePatientsDuration);

            systemConfig.TicketCallRepetitions = await ConfigService
            .GetIntConfigurationAsync(ConfigurationService.TicketCallRepetitions, 2); // Default to 2

            var timeStr = await ConfigService
                .GetStringConfigurationAsync(ConfigurationService.RemovePatientsTime);
            if (TimeSpan.TryParse(timeStr, out var time))
            {
                systemConfig.RemovePatientsTime = time;
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}"));
        }
    }

    private async Task OnValidFormSubmit()
    {
        try
        {
            await ConfigService.SaveConfigurationAsync(
                ConfigurationService.QueueToRoomWithAvailableUsersOnly,
                systemConfig.QueueToRoomWithAvailableUsersOnly);

            await ConfigService.SaveConfigurationAsync(
                ConfigurationService.IsPoolingEnabled,
                systemConfig.IsPoolingEnabled);

            await ConfigService.SaveConfigurationAsync(
            ConfigurationService.FingerprintEnabled,
            systemConfig.FingerprintEnabled);

            await ConfigService.SaveConfigurationAsync(
                ConfigurationService.FormEnabled,
                systemConfig.FormEnabled);

            await ConfigService.SaveFormFieldConfigurationAsync(systemConfig.FormFields);

            await ConfigService.SaveConfigurationAsync(
            ConfigurationService.TicketCallRepetitions,
            systemConfig.TicketCallRepetitions);

            if (systemConfig.RemovePatientsDuration.HasValue)
            {
                await ConfigService.SaveConfigurationAsync(
                    ConfigurationService.RemovePatientsDuration,
                    systemConfig.RemovePatientsDuration.Value);
            }

            if (systemConfig.RemovePatientsTime.HasValue)
            {
                await ConfigService.SaveConfigurationAsync(
                    ConfigurationService.RemovePatientsTime,
                    systemConfig.RemovePatientsTime.Value.ToString());
            }

            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Success,
                    Title = "SUCCESS",
                    HelpText = $"{DateTime.Now}",
                    Message = "System configuration updated successfully."
                });
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}"));
        }
    }
}