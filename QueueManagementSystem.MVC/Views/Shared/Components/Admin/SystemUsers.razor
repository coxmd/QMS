@namespace QueueManagementSystem.MVC.Components
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using QueueManagementSystem.MVC.Models
@using QueueManagementSystem.MVC.Models.Feedback
@using QueueManagementSystem.MVC.Models.Users
@using QueueManagementSystem.MVC.Models.enums
@using QueueManagementSystem.MVC.Services
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@using System.Runtime.CompilerServices
@inject ToastService ToastService
@inject RoleService _roleService
@inject SystemUsersService _systemUsersService
@inject ToastService ToastService
<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

<div class="card" style="padding:20px;background-color:#E6F2F2;">

    <div class="row">
        <h4>@(isEditing ? "Edit Sytem User" : "New System User")</h4>
        <EditForm Model="@formModel" OnValidSubmit="OnValidFormSubmit">
            <DataAnnotationsValidator />
             <ValidationSummary />

            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Surname</label>
                        <InputText class="form-control" @bind-Value="formModel.Surname" />
                        <ValidationMessage For="@(() => formModel.Surname)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Other Names</label>
                        <InputText class="form-control" @bind-Value="formModel.OtherNames" />
                        <ValidationMessage For="@(() => formModel.OtherNames)" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText class="form-control" @bind-Value="formModel.Username" />
                        <ValidationMessage For="@(() => formModel.Username)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText type="password" class="form-control" disabled="@passwordReadonly"
                                   @bind-Value="formModel.Password" />
                        <ValidationMessage For="@(() => formModel.Password)" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Roles <span class="text-danger">*</span></label>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle w-100 text-start" type="button"
                                    @onclick="() => isRolesDropdownOpen = !isRolesDropdownOpen">
                                @(GetSelectedRolesDisplay())
                            </button>
                            <div class="dropdown-menu @(isRolesDropdownOpen ? "show" : "")"
                                 style="width: 100%; max-height: 200px; overflow-y: auto;">
                                @foreach (var roleOption in formModel.RoleOptions)
                                {
                                    <div class="dropdown-item">
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input"
                                                           @bind-Value="roleOption.IsSelected" />
                                            <label class="form-check-label">
                                                @roleOption.Name
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
@* 
                        @if (!formModel.HasSelectedRoles)
                        {
                            <div class="text-danger">At least one role must be selected.</div>
                        } *@
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Confirm Password</label>
                        <InputText type="password" class="form-control" @bind-Value="formModel.ConfirmPassword"
                                   disabled="@passwordReadonly" />
                        <ValidationMessage For="@(() => formModel.ConfirmPassword)" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Submit" Size="ButtonSize.Small" Color="ButtonColor.Success" Class="float-end me-2">
                        <span>@(isEditing ? "Update" : "Create")</span>
                    </Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Success" hidden="@isButtonInVisible"
                            Size="ButtonSize.Small" @onclick="CreateNew" Class="float-end me-2">
                        New
                    </Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Info" hidden="@isButtonInVisible"
                            Size="ButtonSize.Small" @onclick="ResetPassword" Class="float-end me-2">
                        Reset Password
                    </Button>
                </div>
            </div>
        </EditForm>
    </div>


</div>
@if (smsSettingsList == null)
{
    <h4>Roles Loading...</h4>
}
else
{

    <div class="card" style="padding:20px;background-color:#E6F2F2;color:black">
        <Grid @ref="grid" TItem="SystemUsersModel" Class="table table-bordered table-light table-sm compact-grid" Data="smsSettingsList" AllowPaging="true"
              PageSize="10"
              SelectionMode="GridSelectionMode.Single"
              AllowSorting="true"
              AllowRowClick="true"
              Style="background-color:white;"
              EmptyText="No records to display"
              PageSizeSelectorVisible="true"
              PageSizeSelectorItems="@(new int[] { 5,10,20 })"
              OnRowClick="OnRowSelected"
              Responsive="true"
              RowClass="@(x => x == systemUser ? "selected-row" : "")">
            <GridColumn TItem="SystemUsersModel" HeaderText="Id" SortString="Id" SortKeySelector="item => item.Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="SystemUsersModel" HeaderText="Surname" SortString="Surname" SortKeySelector="item => item.Surname">
                @context.Surname
            </GridColumn>
            <GridColumn TItem="SystemUsersModel" HeaderText="OtherNames" SortString="OtherNames" SortKeySelector="item => item.OtherNames">
                @context.OtherNames
            </GridColumn>
            <GridColumn TItem="SystemUsersModel" HeaderText="Username" SortString="Username" SortKeySelector="item => item.Username">
                @context.Username
            </GridColumn>
            <GridColumn TItem="SystemUsersModel" HeaderText="Password" SortString="Password" SortKeySelector="item => item.Password">
                @("*".PadLeft(context.Password.Length, '*'))
            </GridColumn>
            @* <GridColumn TItem="SystemUsersModel" HeaderText="Role" SortString="Role" SortKeySelector="item => item.Role.ToString()">
                @context.Role.ToString()
            </GridColumn> *@
        </Grid>
    </div>
}

<style>
    .large-switch {
        transform: scale(1.5);
        margin-left: 15.5rem;
    }

    .selected-row {
        background-color: #daf1de;
    }

    .table-sm {
        font-size: 0.875rem;
    }

        .table-sm td, .table-sm th {
            padding: 0.25rem;
        }

    .p-1 {
        padding: 0.25rem;
    }

    .grid-header, .grid-row {
        line-height: 0.4;
    }

    .dropdown-menu.show {
        display: block;
        position: absolute;
        transform: translate(0px, 40px);
        border: 1px solid #dee2e6;
        padding: 0.5rem 0;
        background-color: white;
        z-index: 1000;
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
    }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

    .selected-roles {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>
@code {
    private bool isRolesDropdownOpen = false;

    private string GetSelectedRolesDisplay()
    {
        var selectedRoles = formModel.RoleOptions
            .Where(r => r.IsSelected)
            .Select(r => r.Name)
            .ToList();

        if (!selectedRoles.Any())
        {
            return "Select Roles...";
        }

        return string.Join(", ", selectedRoles);
    }

    public class RoleOption
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    public class UserFormModel : INotifyPropertyChanged
    {
        private string surname;
        private string otherNames;
        private string username;
        private string password;
        private string confirmPassword;

        [Required(ErrorMessage = "Surname is required")]
        public string Surname
        {
            get => surname;
            set
            {
                surname = value;
                OnPropertyChanged();
            }
        }

        [Required(ErrorMessage = "Other Names are required")]
        public string OtherNames
        {
            get => otherNames;
            set
            {
                otherNames = value;
                OnPropertyChanged();
            }
        }

        [Required(ErrorMessage = "Username is required")]
        public string Username
        {
            get => username;
            set
            {
                username = value;
                OnPropertyChanged();
            }
        }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password
        {
            get => password;
            set
            {
                password = value;
                OnPropertyChanged();
            }
        }

        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword
        {
            get => confirmPassword;
            set
            {
                confirmPassword = value;
                OnPropertyChanged();
            }
        }

        public List<RoleOption> RoleOptions { get; set; } = new();

        public bool HasSelectedRoles => RoleOptions.Any(r => r.IsSelected);

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }



    private List<ToastMessage> messages = new List<ToastMessage>();
    private UserFormModel formModel = new();
    private SystemUsersModel systemUser = new SystemUsersModel();
    private List<SystemUsersModel> smsSettingsList = new List<SystemUsersModel>();
    private List<UserRole> roles { get; set; } = new List<UserRole>();
    private Grid<SystemUsersModel>? grid;
    private int? selectedRowId;
    private bool isButtonInVisible = true;
    private bool isEditing = false;
    private bool passwordReadonly = false;


    protected override async Task OnInitializedAsync()
    {
        roles = await _roleService.GetRolesAsync();
        InitializeRoleOptions();
        await loadUsers();

    }

    private void InitializeRoleOptions()
    {
        formModel.RoleOptions = roles.Select(r => new RoleOption
            {
                Id = r.Id,
                Name = r.Name,
                IsSelected = false
            }).ToList();
    }



    private void CreateNew()
    {
        passwordReadonly = false;
        isButtonInVisible = true;
        isEditing = false;
        systemUser = new SystemUsersModel();
        // Reset form model with empty values but preserve role options
        formModel = new UserFormModel
            {
                RoleOptions = roles.Select(r => new RoleOption
                {
                    Id = r.Id,
                    Name = r.Name,
                    IsSelected = false
                }).ToList()
            };

        StateHasChanged();

    }
    private async Task ResetPassword()
    {
        try
        {
            string defaultPassword = "123123";
            systemUser.Password = BCrypt.Net.BCrypt.HashPassword(defaultPassword);
            var success = await _systemUsersService.ResetPassword(systemUser);
            if (success)
            {

                ToastService.Notify(new ToastMessage
                    {
                        Type = ToastType.Success,
                        Title = "SUCCESS",
                        HelpText = $"{DateTime.Now}",
                        Message = "Password reset was Successful"
                    });
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
    }

    private async Task OnValidFormSubmit()
    {
        if (!formModel.HasSelectedRoles)
        {
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Validation Error",
                    Message = "At least one role must be selected."
                });
            return;
        }

        MapFormModelToSystemUser();

        if (isEditing)
        {
            await UpdateServiceProvider();
        }
        else
        {
            await CreateServiceProvider();
        }

        formModel = new UserFormModel();
        InitializeRoleOptions();
        systemUser = new SystemUsersModel();
        isEditing = false;
        await loadUsers();
    }


    private void MapFormModelToSystemUser()
    {
        if (systemUser == null)
        {
            systemUser = new SystemUsersModel();
        }

        systemUser.Surname = formModel.Surname;
        systemUser.OtherNames = formModel.OtherNames;
        systemUser.Username = formModel.Username;
        systemUser.Password = formModel.Password;

        // Clear existing roles and add selected ones
        systemUser.UserRoles = formModel.RoleOptions
            .Where(r => r.IsSelected)
            .Select(r => new UserRolesModel
                {
                    RoleId = r.Id,
                    UserId = systemUser.Id // This will be 0 for new users
                })
            .ToList();
    }


    private void MapSystemUserToFormModel()
    {
        if (systemUser != null)
        {
            formModel = new UserFormModel
                {
                    Surname = systemUser.Surname,
                    OtherNames = systemUser.OtherNames,
                    Username = systemUser.Username,
                    Password = systemUser.Password,
                    ConfirmPassword = systemUser.Password,
                    RoleOptions = roles.Select(r => new RoleOption
                    {
                        Id = r.Id,
                        Name = r.Name,
                        IsSelected = systemUser.UserRoles?.Any(ur => ur.RoleId == r.Id) ?? false
                    }).ToList()
                };
        }
    }



    private async Task CreateServiceProvider()
    {
        try
        {
            systemUser.Password = BCrypt.Net.BCrypt.HashPassword(systemUser.Password);
            // Update the roles assignment
            systemUser.UserRoles = systemUser.UserRoles;

            var existingUsername = await _systemUsersService.FetUserName(systemUser.Surname!);
            if (existingUsername != null)
            {
                ToastService.Notify(new ToastMessage
                    {
                        Type = ToastType.Danger,
                        Title = "Error",
                        HelpText = $"{DateTime.Now}",
                        Message = "Username already registered"
                    });
            }

            var success = await _systemUsersService.AddUser(systemUser);
            if (success)
            {
                systemUser = new SystemUsersModel();
                ToastService.Notify(new ToastMessage
                    {
                        Type = ToastType.Success,
                        Title = "SUCCESS",
                        HelpText = $"{DateTime.Now}",
                        Message = "Registration successful"
                    });
            }


        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error saving comments: {ex.Message}"));
        }
    }
    private async Task loadUsers()
    {
        smsSettingsList = await _systemUsersService.FetUsers();
    }
    private async Task UpdateServiceProvider()
    {
        try
        {

            systemUser.Password = BCrypt.Net.BCrypt.HashPassword(systemUser.Password);
            var success = await _systemUsersService.EditUser(systemUser);
            if (success)
            {
                systemUser = new SystemUsersModel();
                ToastService.Notify(new ToastMessage
                    {
                        Type = ToastType.Success,
                        Title = "SUCCESS",
                        HelpText = $"{DateTime.Now}",
                        Message = "Sytem User Successful"
                    });
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
    }

    private void OnRowSelected(GridRowEventArgs<SystemUsersModel> args)
    {
        systemUser = args.Item;
        selectedRowId = args.Item.Id;
        isEditing = true;
        isButtonInVisible = false;
        passwordReadonly = true;


        // Map the selected user data to the form model
        MapSystemUserToFormModel();
        StateHasChanged(); // Ensure UI updates

    }
    
}
